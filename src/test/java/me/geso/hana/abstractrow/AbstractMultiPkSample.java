package me.geso.hana.abstractrow;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Blob;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.Instant;
import javax.annotation.Generated;

import me.geso.hana.annotation.Table;
import me.geso.hana.Insert;
import me.geso.hana.ConditionInterface;
import me.geso.hana.HanaException;
import me.geso.hana.Select;

@Generated(value={}, comments="Generated by me.geso.hana.generator.RowClassGenerator")
@SuppressWarnings("unused")
@Table(name = "multi_pk_sample")
public abstract class AbstractMultiPkSample extends me.geso.hana.AbstractRow {
	public String getTableName() { return "multi_pk_sample"; }
	private static final List<String> primaryKeys = Arrays.asList("id1","id2");
	@Override
	public List<String> getPrimaryKeys() {
		return primaryKeys;
	}

	@Override
	public void initialize(ResultSet rs) throws SQLException {
		ResultSetMetaData meta = rs.getMetaData();
		int columnCount = meta.getColumnCount();
		for (int i=1; i<columnCount+1; ++i) {
			String label = meta.getColumnLabel(i);
			switch (label) {
			case "id1":
				this.id1 = rs.getLong(i);
				this._HaNa_selected_id1 = true;
				break;
			case "id2":
				this.id2 = rs.getLong(i);
				this._HaNa_selected_id2 = true;
				break;
			case "title":
				this.title = rs.getString(i);
				this._HaNa_selected_title = true;
				break;
			case "email":
				this.email = rs.getString(i);
				this._HaNa_selected_email = true;
				break;
			} // switch
		} // for
	}
	public me.geso.hana.row.MultiPkSample insert(Connection connection) throws SQLException, HanaException {
		Insert insert = Insert.into(this.getTableName());
		if (_HaNa_dirty_id1) {
			insert.value("id1", this.getId1());
		}
		if (_HaNa_dirty_id2) {
			insert.value("id2", this.getId2());
		}
		if (_HaNa_dirty_title) {
			insert.value("title", this.getTitle());
		}
		if (_HaNa_dirty_email) {
			insert.value("email", this.getEmail());
		}
		PreparedStatement stmt = insert.build(connection).prepare(connection);
		stmt.executeUpdate();
		return (me.geso.hana.row.MultiPkSample)this;
	}

	public static Optional<me.geso.hana.row.MultiPkSample> find(Connection connection, long id1, long id2) throws SQLException, HanaException {
		return Select.from(me.geso.hana.row.MultiPkSample.class)
		.where(me.geso.hana.Condition.eq("id1", id1))
		.where(me.geso.hana.Condition.eq("id2", id2))
		.stream(connection).findFirst();
	}

	public Optional<me.geso.hana.row.MultiPkSample> refetch(Connection connection) throws SQLException, HanaException {
		return AbstractMultiPkSample.find(connection,id1, id2);
	}

	public static long count(Connection connection) throws SQLException, HanaException {
		return Select.from(AbstractMultiPkSample.class).count(connection)
;	}
	@Override
	public ConditionInterface condition() throws SQLException, HanaException {
		if (!this._HaNa_selected_id1) {
				throw new HanaException("The row doesn't contain *selected* primary key: id1");
		}
		if (!this._HaNa_selected_id2) {
				throw new HanaException("The row doesn't contain *selected* primary key: id2");
		}

		ConditionInterface condition = null;
		condition = me.geso.hana.Condition.and(condition, me.geso.hana.Condition.eq("id1", this.getId1()));
		condition = me.geso.hana.Condition.and(condition, me.geso.hana.Condition.eq("id2", this.getId2()));
		return condition;
	}
	@Override
	protected void setUpdateParameters(me.geso.hana.Update update) throws HanaException, SQLException {
		if (_HaNa_dirty_id1) {
			update.set("id1", this.getId1());
		}
		if (_HaNa_dirty_id2) {
			update.set("id2", this.getId2());
		}
		if (_HaNa_dirty_title) {
			update.set("title", this.getTitle());
		}
		if (_HaNa_dirty_email) {
			update.set("email", this.getEmail());
		}
	}
       @Override
	public String toString() {
		return "AbstractMultiPkSample ["
			+ " id1=" + id1
			+ " id2=" + id2
			+ " title=" + title
			+ " email=" + email
		+ "]";
	}
	// Column: id1 INTEGER(10)
	private long id1;

	private boolean _HaNa_dirty_id1;	private boolean _HaNa_selected_id1;	public long getId1() {
		return this.id1;
	}

	public me.geso.hana.row.MultiPkSample setId1(long value) {
		this.id1 = value;
		_HaNa_dirty_id1 = true;
		return (me.geso.hana.row.MultiPkSample)this;
	}

	// Column: id2 INTEGER(10)
	private long id2;

	private boolean _HaNa_dirty_id2;	private boolean _HaNa_selected_id2;	public long getId2() {
		return this.id2;
	}

	public me.geso.hana.row.MultiPkSample setId2(long value) {
		this.id2 = value;
		_HaNa_dirty_id2 = true;
		return (me.geso.hana.row.MultiPkSample)this;
	}

	// Column: title VARCHAR(255)
	private String title;

	private boolean _HaNa_dirty_title;	private boolean _HaNa_selected_title;	public String getTitle() {
		return this.title;
	}

	public me.geso.hana.row.MultiPkSample setTitle(String value) {
		this.title = value;
		_HaNa_dirty_title = true;
		return (me.geso.hana.row.MultiPkSample)this;
	}

	// Column: email VARCHAR(255)
	private String email;

	private boolean _HaNa_dirty_email;	private boolean _HaNa_selected_email;	public String getEmail() {
		return this.email;
	}

	public me.geso.hana.row.MultiPkSample setEmail(String value) {
		this.email = value;
		_HaNa_dirty_email = true;
		return (me.geso.hana.row.MultiPkSample)this;
	}

}
