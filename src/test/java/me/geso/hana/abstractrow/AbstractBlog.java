package me.geso.hana.abstractrow;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Blob;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.Instant;
import javax.annotation.Generated;

import me.geso.hana.annotation.Table;
import me.geso.hana.Insert;
import me.geso.hana.ConditionInterface;
import me.geso.hana.HanaException;
import me.geso.hana.Select;

@Generated(value={}, comments="Generated by me.geso.hana.generator.RowClassGenerator")
@SuppressWarnings("unused")
@Table(name = "blog")
public abstract class AbstractBlog extends me.geso.hana.AbstractRow {
	public String getTableName() { return "blog"; }
	private static final List<String> primaryKeys = Arrays.asList("id");
	@Override
	public List<String> getPrimaryKeys() {
		return primaryKeys;
	}

	@Override
	public void initialize(ResultSet rs) throws SQLException {
		ResultSetMetaData meta = rs.getMetaData();
		int columnCount = meta.getColumnCount();
		for (int i=1; i<columnCount+1; ++i) {
			String label = meta.getColumnLabel(i);
			switch (label) {
			case "id":
				this.id = rs.getLong(i);
				this._HaNa_selected_id = true;
				break;
			case "title":
				this.title = rs.getString(i);
				this._HaNa_selected_title = true;
				break;
			case "url":
				this.url = rs.getString(i);
				this._HaNa_selected_url = true;
				break;
			case "member_id":
				this.member_id = rs.getLong(i);
				this._HaNa_selected_member_id = true;
				break;
			case "created_on":
				this.created_on = rs.getLong(i);
				this._HaNa_selected_created_on = true;
				break;
			case "updated_on":
				this.updated_on = rs.getLong(i);
				this._HaNa_selected_updated_on = true;
				break;
			} // switch
		} // for
	}
	public me.geso.hana.row.Blog insert(Connection connection) throws SQLException, HanaException {
		Insert insert = Insert.into(this.getTableName());
		if (_HaNa_dirty_id) {
			insert.value("id", this.getId());
		}
		if (_HaNa_dirty_title) {
			insert.value("title", this.getTitle());
		}
		if (_HaNa_dirty_url) {
			insert.value("url", this.getUrl());
		}
		if (_HaNa_dirty_member_id) {
			insert.value("member_id", this.getMemberId());
		}
		if (_HaNa_dirty_created_on) {
			insert.value("created_on", this.getCreatedOn());
		}
		if (_HaNa_dirty_updated_on) {
			insert.value("updated_on", this.getUpdatedOn());
		}
		PreparedStatement stmt = insert.build(connection).prepare(connection);
		stmt.execute();
		try (ResultSet rs = stmt.getGeneratedKeys();) {
			if (rs.next()) {
				this.setId(rs.getLong(1));
				this._HaNa_selected_id = true;
			}
		}
		return (me.geso.hana.row.Blog)this;
	}

	@Override
	public String getColumn(String column) throws SQLException, HanaException {
		switch (column) {
			case "id":
				return String.valueOf(this.id);
			case "title":
				return String.valueOf(this.title);
			case "url":
				return String.valueOf(this.url);
			case "member_id":
				return String.valueOf(this.member_id);
			case "created_on":
				return String.valueOf(this.created_on);
			case "updated_on":
				return String.valueOf(this.updated_on);
		default:
			throw new HanaException("Unknown column: " + column);
		}
	}


	public static Optional<me.geso.hana.row.Blog> find(Connection connection, long id) throws SQLException, HanaException {
		return Select.from(me.geso.hana.row.Blog.class)
		.where(me.geso.hana.Condition.eq("id", id))
		.stream(connection).findFirst();
	}

	public Optional<me.geso.hana.row.Blog> refetch(Connection connection) throws SQLException, HanaException {
		return AbstractBlog.find(connection,id);
	}

	public static long count(Connection connection) throws SQLException, HanaException {
		return Select.from(AbstractBlog.class).count(connection)
;	}
	@Override
	public ConditionInterface condition() throws SQLException, HanaException {
		if (!this._HaNa_selected_id) {
				throw new HanaException("The row doesn't contain *selected* primary key: id");
		}

		ConditionInterface condition = null;
		condition = me.geso.hana.Condition.and(condition, me.geso.hana.Condition.eq("id", this.getId()));
		return condition;
	}
	@Override
	protected void setUpdateParameters(me.geso.hana.Update update) throws HanaException, SQLException {
		if (_HaNa_dirty_id) {
			update.set("id", this.getId());
		}
		if (_HaNa_dirty_title) {
			update.set("title", this.getTitle());
		}
		if (_HaNa_dirty_url) {
			update.set("url", this.getUrl());
		}
		if (_HaNa_dirty_member_id) {
			update.set("member_id", this.getMemberId());
		}
		if (_HaNa_dirty_created_on) {
			update.set("created_on", this.getCreatedOn());
		}
		if (_HaNa_dirty_updated_on) {
			update.set("updated_on", this.getUpdatedOn());
		}
	}
       @Override
	public String toString() {
		return "AbstractBlog ["
			+ " id=" + id
			+ " title=" + title
			+ " url=" + url
			+ " member_id=" + member_id
			+ " created_on=" + created_on
			+ " updated_on=" + updated_on
		+ "]";
	}
	// Column: id INTEGER(10)
	private long id;

	private boolean _HaNa_dirty_id;	private boolean _HaNa_selected_id;	public long getId() {
		return this.id;
	}

	public me.geso.hana.row.Blog setId(long value) {
		this.id = value;
		_HaNa_dirty_id = true;
		return (me.geso.hana.row.Blog)this;
	}

	// Column: title VARCHAR(255)
	private String title;

	private boolean _HaNa_dirty_title;	private boolean _HaNa_selected_title;	public String getTitle() {
		return this.title;
	}

	public me.geso.hana.row.Blog setTitle(String value) {
		this.title = value;
		_HaNa_dirty_title = true;
		return (me.geso.hana.row.Blog)this;
	}

	// Column: url VARCHAR(65535)
	private String url;

	private boolean _HaNa_dirty_url;	private boolean _HaNa_selected_url;	public String getUrl() {
		return this.url;
	}

	public me.geso.hana.row.Blog setUrl(String value) {
		this.url = value;
		_HaNa_dirty_url = true;
		return (me.geso.hana.row.Blog)this;
	}

	// Column: member_id INTEGER(10)
	private long member_id;

	private boolean _HaNa_dirty_member_id;	private boolean _HaNa_selected_member_id;	public long getMemberId() {
		return this.member_id;
	}

	public me.geso.hana.row.Blog setMemberId(long value) {
		this.member_id = value;
		_HaNa_dirty_member_id = true;
		return (me.geso.hana.row.Blog)this;
	}

	// Column: created_on INTEGER(10)
	private long created_on=Instant.now().getEpochSecond();

	private boolean _HaNa_dirty_created_on;	private boolean _HaNa_selected_created_on;	public long getCreatedOn() {
		return this.created_on;
	}

	public me.geso.hana.row.Blog setCreatedOn(long value) {
		this.created_on = value;
		_HaNa_dirty_created_on = true;
		return (me.geso.hana.row.Blog)this;
	}

	// Column: updated_on INTEGER(10)
	private long updated_on;

	private boolean _HaNa_dirty_updated_on;	private boolean _HaNa_selected_updated_on;	public long getUpdatedOn() {
		return this.updated_on;
	}

	public me.geso.hana.row.Blog setUpdatedOn(long value) {
		this.updated_on = value;
		_HaNa_dirty_updated_on = true;
		return (me.geso.hana.row.Blog)this;
	}

	/**
	 * Seach entry related on blog.
	 * @param connection
	 * @return
	 * @throws java.sql.SQLException
	 * @throws me.geso.hana.HanaException
	 */
	public long countEntries(Connection connection) throws SQLException, HanaException {
		return Select.from(me.geso.hana.row.Entry.class).where(me.geso.hana.Condition.eq("blog_id", this.id)).count(connection);
	}
	
	public Stream<me.geso.hana.row.Entry> searchEntries(Connection connection) throws SQLException, HanaException {
		return Select.from(me.geso.hana.row.Entry.class).where(me.geso.hana.Condition.eq("blog_id", this.id)).stream(connection);
	}
	
	public Optional<me.geso.hana.row.Member> retrieveMember(Connection connection) throws SQLException, HanaException {
		return Select.from(me.geso.hana.row.Member.class).where(me.geso.hana.Condition.eq("id", this.member_id)).stream(connection).findFirst();
	}
	
}
